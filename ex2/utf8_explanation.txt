// 207237421 Yael Avioz
UTF-8 (Unicode Transformation Format - 8 bits)
זהו קידוד תווים באורך משתנה ליוניקוד (תקן בין-לאומי לייצוג טקסט במערכות מחשב). 
יוניקוד הוא מעיין טבלה גדולה הממפה כל תו למספר המייצג אותו , אך יוניקוד אינו מציין כיצד יש לשמור כל תו ולכן יש צורך במציאת שיטה לקידוד תווים.
היא שיטה כזו , הקידוד מציין כיצד יש לשמור את המספר שמייצג את התו אותו בחרנו ולשמור אותו בזיכרון (את המספר המייצג את התו נקבל באצמעות טבלת היוניקוד) UTF-8
כפי שכבר ציינו לכל תו בטבלת היוניקוד קיים מספר שונה המייצג אותו, כאשר הקידוד של כל מספר שונה יתבצע באמצעות מספר משתנה של בתים ורצף שונה של ביטים בתחילת כל בית במידה והוא חלק ממספר בתים המייצגים תו אחד
הבחירה בכמה בתים לייצג כל תו מתבצעת באמצעות חלוקת התווים הקיימים ביוניקוד לטווחים הנבדלים בקידוד שלהם בהקסדצימלית
כל טווח מספרים מקודד באמצעות מספר שונה של בתים 
במידה ואנו מייצגים תו שמיוצג באמצעות בית אחד הסיבית המשמעותית ביותר בבית תהיה 0, אך אם התו מיוצג במספר בתים הסיבית המשמעותית ביותר תהיה 1
כאשר אנו מייצגים תו באמצעות יותר מבית אחד אז בבית הראשון יופיעו רצף ביטים של אחדות כמספר הבתים ולאחר מכן הספרה 0, כך נוכל לדעת בדיוק בכמה בתים מיוצג התו אותו קודדנו
בנוסף, זה מונע בלבול בין בית המייצג תו באסקי לבין בית שהוא חלק ממספר תווים המייצגים תו אחד
וגם בזכות צורת קידוד זו, במידה ואם נסתכל על חלק מסויים מהקידוד לא נוכל לפרש אותו כתו אחר פרט לתו אותו הם מייצגים ולכן זוהי שיטת קידוד אמינה מאוד
UTF-8 יתרונות נוספים של שיטה זו הם שניתן להפעיל כל אלגוריתם מיון המבוסס על חיפוש לפי בתים על טקסטים שקודדו ב
ניתן לזהות בצורה אמינה ופשוטה טקסטים שקודדו בקידוד זה
ויתרה מכך משום שהקידוד יכול לקודד כל תו יוניקוד אז ניתן להמיר כל טקסט שקודד בקידוד מיושן לקידוד יוניקוד ובחזרה מבלי לאבד מידע
אך, קיים גם חיסרון - לרוב הקידוד ייביא לצריכת זיכרון גדולה יותר מאשר קידוד של אותו טקסט בשיטה אחרת
